{"custom_id": "4764", "request_messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "You have been assigned a retrieval task: Given a coding problem, retrieve the relevant problems that can be solved by the similar algorithm.\nYou will be given a user query and a positive document. Your mission is to write one hard negative document. \nThe hard negative document is hard because it uses similar words or shares similar background with the user query.\nThe hard negative document is negative because it uses a algorithm that cannot be used to solve the problem in the user query.\nThe hard negative document should not be related to Two Pointers, Merge Sort, Longest Increasing Subsequence (LIS), Quick Sort, Palindrome Partitioning, Trapping Rain Water, Substring Search Algorithm.\n\n**User Query**\nYou are given a string containing only lowercase letters and a single lowercase letter `c`. Your task is to find the maximum length of a substring that can be formed by replacing at most one occurrence of `c` with any other lowercase letter from the alphabet. If the original string already contains all the lowercase letters except for `c`, then the maximum length of such a substring is equal to the length of the string.\n\nWrite a function `max_substring_length(s: str, c: str) -> int` that returns the maximum length of the substring that meets these criteria.\n\n**Input**: \n- A string `s` (1 \u2264 |s| \u2264 10^6), containing only lowercase letters.\n- A single lowercase letter `c`.\n\n**Output**:\n- An integer representing the maximum length of the substring.\n\n**Examples**:\n1. `max_substring_length(\"abcabc\", \"a\")` should return `6`\n2. `max_substring_length(\"abcdabcda\", \"b\")` should return `8`\n3. `max_substring_length(\"abcdecba\", \"e\")` should return `7`\n\n**Positive Document**\nfrom typing import List, Tuple\n\ndef find_max_sweetness_pair(drinks: List[int], target_sweetness: int) -> Tuple[int, int]:\n    \"\"\"\n    Find the pair of drinks that sums up to the maximum sweetness level less than or equal \n    to the target sweetness. Each drink is represented by an integer, which signifies its \n    sweetness level.\n\n    Parameters:\n    - drinks (List[int]): A list of integers representing the sweetness levels of drinks.\n      (1 <= len(drinks) <= 10^6, -10^4 <= drinks[i] <= 10^4)\n    - target_sweetness (int): The desired sweetness level of the pair of drinks.\n      (-10^4 <= target_sweetness <= 10^4)\n\n    Returns:\n    - Tuple[int, int]: A tuple containing the indices of the pair of drinks in ascending order\n      such that their sweetness levels sum up to the maximum value less than or equal to \n      target_sweetness. If no valid pair exists, returns (-1, -1).\n    \"\"\"\n    drinks.sort()\n    left, right = 0, len(drinks) - 1\n    max_pair = (-1, -1)\n    max_sum = -1\n    \n    while left < right:\n        current_sum = drinks[left] + drinks[right]\n        \n        if current_sum <= target_sweetness:\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_pair = (left, right)\n            left += 1\n        else:\n            right -= 1\n\n    return max_pair\n\n\nDirectly response the content of hard negative document without explanation.\n**Hard Negative Document**\n"}], "model": "deepseek-chat", "response": {"body": {"choices": [{"message": {"role": "assistant", "content": "```python\ndef max_substring_length(s: str, c: str) -> int:\n    \"\"\"\n    This function attempts to solve the problem by checking all possible substrings and counting \n    the occurrences of the character `c` in each substring. It returns the length of the longest \n    substring where the count of `c` is at most 1. \n\n    Note: This approach uses a brute-force method with nested loops, resulting in a time complexity \n    of O(n^2), which is inefficient for large strings (|s| \u2264 10^6) and does not utilize the optimal \n    sliding window technique.\n\n    Parameters:\n    - s (str): A string containing only lowercase letters.\n    - c (str): A single lowercase letter.\n\n    Returns:\n    - int: The maximum length of a substring with at most one occurrence of `c`.\n    \"\"\"\n    max_len = 0\n    n = len(s)\n    \n    for i in range(n):\n        c_count = 0\n        for j in range(i, n):\n            if s[j] == c:\n                c_count += 1\n                if c_count > 1:\n                    break\n            current_len = j - i + 1\n            if current_len > max_len:\n                max_len = current_len\n    \n    return max_len\n```", "finish_reason": "stop"}}]}}}
