{"custom_id": "request-1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Two Pointers with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nTwo Pointers\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: N-Queens Problem with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nN-Queens Problem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Sweep Line Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSweep Line Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Kahn's Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nKahn's Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Dijkstra's Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nDijkstra's Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Game Theory with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nGame Theory\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Depth First Search (DFS) with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nDepth First Search (DFS)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Prefix Sum with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nPrefix Sum\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Greedy Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nGreedy Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Bucket Sort with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nBucket Sort\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Breadth First Search (BFS) with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nBreadth First Search (BFS)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-12", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Longest Common Subsequence (LCS) with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nLongest Common Subsequence (LCS)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Huffman Coding with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nHuffman Coding\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-14", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Manhattan Distance with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nManhattan Distance\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-15", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Topological Sorting with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nTopological Sorting\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-16", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Rod Cutting Problem with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nRod Cutting Problem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-17", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Binary Search with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nBinary Search\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-18", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Knapsack Algorithm (0/1 Knapsack) with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nKnapsack Algorithm (0/1 Knapsack)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-19", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Floyd-Warshall Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nFloyd-Warshall Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-20", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Bellman-Ford Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nBellman-Ford Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-21", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Merge Sort with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nMerge Sort\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-22", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Quick Sort with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nQuick Sort\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Heap Sort with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nHeap Sort\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-24", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Bubble Sort with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nBubble Sort\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-25", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Insertion Sort with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nInsertion Sort\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-26", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Selection Sort with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSelection Sort\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-27", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Kruskal's Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nKruskal's Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-28", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Prim's Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nPrim's Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-29", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Kadane's Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nKadane's Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-30", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Rabin-Karp Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nRabin-Karp Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-31", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Knuth-Morris-Pratt (KMP) Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nKnuth-Morris-Pratt (KMP) Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-32", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Boyer-Moore Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nBoyer-Moore Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-33", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Longest Increasing Subsequence (LIS) with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nLongest Increasing Subsequence (LIS)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-34", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Edit Distance with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nEdit Distance\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-35", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Sieve of Eratosthenes with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSieve of Eratosthenes\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-36", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Tarjan's Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nTarjan's Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-37", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Kosaraju's Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nKosaraju's Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-38", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Z Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nZ Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-39", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: LRU Cache Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nLRU Cache Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-40", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: A-star search algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nA-star search algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-41", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Hamiltonian Path with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nHamiltonian Path\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-42", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Substring Search Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSubstring Search Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-43", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Permutations with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nPermutations\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-44", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Combinations with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nCombinations\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-45", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Knapsack DP with Bitmasking with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nKnapsack DP with Bitmasking\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-46", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Matrix Exponentiation with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nMatrix Exponentiation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-47", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Square Root Decomposition with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSquare Root Decomposition\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-48", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Mo's Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nMo's Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-49", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Strassen's Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nStrassen's Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-50", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: K-Means Clustering with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nK-Means Clustering\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Gradient Descent with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nGradient Descent\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-52", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Support Vector Machines (SVM) with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSupport Vector Machines (SVM)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-53", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Aho-Corasick Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nAho-Corasick Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-54", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Ford-Fulkerson Algorithm with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nFord-Fulkerson Algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-55", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Trapping Rain Water with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nTrapping Rain Water\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-56", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Matrix Chain Multiplication with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nMatrix Chain Multiplication\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-57", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Coin Change Problem with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nCoin Change Problem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-58", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Palindrome Partitioning with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nPalindrome Partitioning\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-59", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Sudoku Solver with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSudoku Solver\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-60", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the algorithm: Newton's Method with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nNewton's Method\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Stack (Last In, First Out) with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nStack (Last In, First Out)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-62", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Monotonic Stack with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nMonotonic Stack\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Priority Queue with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nPriority Queue\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-64", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Binary Tree with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nBinary Tree\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-65", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Trie with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nTrie\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-66", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Circular Array with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nCircular Array\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-67", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Hash Map with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nHash Map\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-68", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Linked List with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nLinked List\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-69", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Adjacency List with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nAdjacency List\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-70", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Disjoint Set with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nDisjoint Set\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-71", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Suffix Array with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSuffix Array\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-72", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Suffix Tree with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSuffix Tree\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-73", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Skip List with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSkip List\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-74", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Red-Black Tree with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nRed-Black Tree\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: B-Tree with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nB-Tree\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-76", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Fenwick Tree (Binary Indexed Tree) with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nFenwick Tree (Binary Indexed Tree)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-77", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Interval Tree with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nInterval Tree\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-78", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Segment Tree with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nSegment Tree\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-79", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: k-D Tree with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nk-D Tree\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-80", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Quad Tree with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nQuad Tree\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-81", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Octree with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nOctree\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-82", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Cuckoo Hashing with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nCuckoo Hashing\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-83", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Fibonacci Heap with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nFibonacci Heap\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Binomial Heap with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nBinomial Heap\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-85", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Pairing Heap with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nPairing Heap\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Treap with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nTreap\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Deque (Double-Ended Queue) with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nDeque (Double-Ended Queue)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-88", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Bloom Filter with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nBloom Filter\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-89", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Radix Tree with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nRadix Tree\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-90", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the data structure: Directed Acyclic Graph with the implementation code.\n\nHere are some examples:\n**Concept**\nBinary Search\n**Definition**\nBinary Search is an efficient algorithm for finding a target value within a sorted array or list. It works by repeatedly dividing the search interval in half. If the value of the target is less than the middle element of the list, the algorithm continues the search on the left half, otherwise, it continues on the right half. This process is repeated until the target value is found or the interval is empty, which indicates that the target value is not present in the array.\n**Implementation Code**\n```python\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # Check if the target is present at mid\n        if arr[mid] == target:\n            return mid  # Target found at index mid\n        # If target is greater, ignore the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If target is smaller, ignore the right half\n        else:\n            right = mid - 1\n\n    # Target not found\n    return -1\n```\n\n**Concept**\nHash Set\n**Definition**\nA Hash Set is a data structure that implements a collection of unique elements, designed to provide efficient operations for adding, removing, and checking for the existence of items. It uses a hash table to store the elements, which allows for average time complexity of O(1) for these operations. Each element is hashed to compute an index in an underlying array, where the element is stored. In the event of hash collisions, the structure typically employs techniques such as chaining or open addressing.\n**Implementation Code**\n```python\nclass HashSet:\n    def __init__(self):\n        self.size = 1000  # Initial size of the hash table\n        self.table = [[] for _ in range(self.size)]  # Initialize hash table with empty lists\n    \n    def _hash(self, key):\n        return key % self.size  # Simple hash function\n\n    def add(self, key):\n        index = self._hash(key)\n        if key not in self.table[index]:  # Check for duplicates\n            self.table[index].append(key)  # Append key to the list at the hashed index\n\n    def remove(self, key):\n        index = self._hash(key)\n        if key in self.table[index]:\n            self.table[index].remove(key)  # Remove the key if it exists\n\n    def contains(self, key):\n        index = self._hash(key)\n        return key in self.table[index]  # Return True if the key is found, otherwise False\n```\n\nHere is your task:\n**Concept**\nDirected Acyclic Graph\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-91", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Newton's Sums. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nNewton's Sums\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-92", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Pigeonhole Principle. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPigeonhole Principle\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-93", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Chicken McNugget Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nChicken McNugget Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Simon's Favorite Factoring Trick. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSimon's Favorite Factoring Trick\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-95", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Fermat's Little Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFermat's Little Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-96", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Ptolemys theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPtolemys theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-97", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Euler's Identity. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nEuler's Identity\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-98", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Euclidean algorithm. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nEuclidean algorithm\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-99", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Cauchy-Riemann Equations (Complex Analysis). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCauchy-Riemann Equations (Complex Analysis)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-100", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Vieta's Formulas. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nVieta's Formulas\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-101", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Triangle Inequality. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nTriangle Inequality\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-102", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Power of a Point. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPower of a Point\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-103", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Central Limit Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCentral Limit Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-104", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Pick's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPick's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-105", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Shoelace Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nShoelace Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-106", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Legendre's formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLegendre's formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-107", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Principle of Inclusion Exclusion. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPrinciple of Inclusion Exclusion\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-108", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Ceva's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCeva's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-109", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Logarithm: Change of Base Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLogarithm: Change of Base Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-110", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Stars and Bars formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nStars and Bars formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-111", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Eigenvalue equation. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nEigenvalue equation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-112", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Intermediate Value Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nIntermediate Value Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-113", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Mass point geometry theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMass point geometry theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-114", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Geometric probability in 2D. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nGeometric probability in 2D\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-115", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Fourier Transform. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFourier Transform\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-116", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Cramer's Rule. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCramer's Rule\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-117", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Vertex cover in graph theory. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nVertex cover in graph theory\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-118", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: One-sample t-test. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nOne-sample t-test\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-119", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Z-transform. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nZ-transform\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-120", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Ramsey's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nRamsey's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-121", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Pollard's Rho Algorithm (Factorization). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPollard's Rho Algorithm (Factorization)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-122", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Chinese Remainder Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nChinese Remainder Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-123", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Taylor's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nTaylor's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-124", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Addition of Multiindices. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nAddition of Multiindices\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-125", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Bayes' Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBayes' Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-126", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Binomial Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBinomial Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-127", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Mean Value Theorem for Derivatives. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMean Value Theorem for Derivatives\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-128", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Pythagorean Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPythagorean Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-129", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Lagrange's Theorem (Group Theory). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLagrange's Theorem (Group Theory)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-130", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: The Chain Rule in calculus. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nThe Chain Rule in calculus\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-131", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Green's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nGreen's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-132", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Cauchy-Schwarz Inequality. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCauchy-Schwarz Inequality\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-133", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Divergence Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nDivergence Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-134", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Second Part of the Fundamental Theorem of Calculus (FTC2). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSecond Part of the Fundamental Theorem of Calculus (FTC2)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-135", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Quadratic Formula (for polynomials of degree 2). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nQuadratic Formula (for polynomials of degree 2)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-136", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Fundamental Theorem of Arithmetic. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFundamental Theorem of Arithmetic\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-137", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Rolle's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nRolle's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-138", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: De Moivre's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nDe Moivre's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-139", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Law of Large Numbers. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLaw of Large Numbers\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-140", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Cayley-Hamilton Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCayley-Hamilton Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-141", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: L'H\u00f4pital's Rule. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nL'H\u00f4pital's Rule\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-142", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Singular Value Decomposition (SVD) Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSingular Value Decomposition (SVD) Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-143", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: The Squeeze Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nThe Squeeze Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-144", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Brouwer Fixed-Point Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBrouwer Fixed-Point Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-145", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Tychonoff's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nTychonoff's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-146", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: B\u00e9zout's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nB\u00e9zout's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-147", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Vandermonde's Identity. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nVandermonde's Identity\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-148", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Wilson's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nWilson's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-149", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Markov Property. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMarkov Property\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-150", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Invertible Matrix Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nInvertible Matrix Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-151", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Sylow Theorems. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSylow Theorems\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-152", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Cantor's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCantor's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-153", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Heron's Formula (for the area of a triangle). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHeron's Formula (for the area of a triangle)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-154", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Laplace Transform. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLaplace Transform\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-155", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Bolzano-Weierstrass Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBolzano-Weierstrass Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-156", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Weierstrass Approximation Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nWeierstrass Approximation Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-157", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Cauchy's Mean Value Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCauchy's Mean Value Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-158", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Lindelof's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLindelof's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-159", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Poisson Limit Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPoisson Limit Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-160", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Mertens' Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMertens' Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-161", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Chebyshev's Inequality. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nChebyshev's Inequality\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-162", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Markov's Inequality. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMarkov's Inequality\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-163", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Jensen's Inequality. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nJensen's Inequality\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-164", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Borel-Cantelli Lemma. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBorel-Cantelli Lemma\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-165", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Chauvenet's Criterion. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nChauvenet's Criterion\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-166", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Helly's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHelly's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-167", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Holder's Inequality. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHolder's Inequality\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-168", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Minkowski's Inequality. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMinkowski's Inequality\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-169", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Euler's Formula for Planar Graphs. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nEuler's Formula for Planar Graphs\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-170", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Hahn Decomposition Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHahn Decomposition Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-171", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Radon-Nikodym Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nRadon-Nikodym Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-172", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Kakutani Fixed-Point Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nKakutani Fixed-Point Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-173", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Sum of a Geometric Series Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSum of a Geometric Series Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-174", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: The Isoperimetric Inequality. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nThe Isoperimetric Inequality\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-175", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Spectral Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSpectral Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-176", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Power Rule (for derivatives). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPower Rule (for derivatives)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-177", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Hadamard's Determinant Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHadamard's Determinant Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-178", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Borel's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBorel's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-179", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Runge's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nRunge's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-180", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Euler's Formula for Polyhedra. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nEuler's Formula for Polyhedra\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-181", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Integral of a Power Function Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nIntegral of a Power Function Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-182", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Poincar\u00e9 Recurrence Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPoincar\u00e9 Recurrence Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-183", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Extreme Value Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nExtreme Value Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-184", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Dirichlet's Theorem on Primes in Arithmetic Progressions. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nDirichlet's Theorem on Primes in Arithmetic Progressions\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-185", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Lefschetz Fixed-Point Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLefschetz Fixed-Point Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-186", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Seifert-van Kampen Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSeifert-van Kampen Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-187", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Hurewicz Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHurewicz Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-188", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Frobenius' Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFrobenius' Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-189", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Formula for Permutations (without repetition). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFormula for Permutations (without repetition)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-190", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the math theorem: Formula for Combinations (with repetition). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFormula for Combinations (with repetition)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-191", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Center-of-Mass Energy. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCenter-of-Mass Energy\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-192", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Planck's energy-frequency relation. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPlanck's energy-frequency relation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-193", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Magnification theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMagnification theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-194", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Maximum Entropy Principle. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMaximum Entropy Principle\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-195", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Heron's Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHeron's Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-196", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Gibbs Free Energy. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nGibbs Free Energy\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-197", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Ideal Gas Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nIdeal Gas Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-198", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Torricelli's Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nTorricelli's Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-199", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Coulomb's Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCoulomb's Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-200", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Gauss's Law for Electricity. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nGauss's Law for Electricity\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-201", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Kirchhoff's Laws. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nKirchhoff's Laws\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-202", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Ohm's Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nOhm's Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-203", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Millma's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMillma's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-204", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Carnot's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCarnot's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-205", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Beer-Lambert Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBeer-Lambert Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-206", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Newton's Laws of Motion. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nNewton's Laws of Motion\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-207", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Lorentz Force. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLorentz Force\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-208", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: First Law of Thermodynamics. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFirst Law of Thermodynamics\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-209", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Work-Energy Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nWork-Energy Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-210", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Maxwell's Equations. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMaxwell's Equations\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-211", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Conservation of Mechanical Energy. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nConservation of Mechanical Energy\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-212", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Kinetic Energy Theorem for Rotational Motion. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nKinetic Energy Theorem for Rotational Motion\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-213", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Conservation of Angular Momentum. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nConservation of Angular Momentum\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-214", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Torque-Angular Momentum Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nTorque-Angular Momentum Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-215", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Centripetal Force Formula (for an object in circular motion). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCentripetal Force Formula (for an object in circular motion)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-216", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Euler's Rotation Theorems. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nEuler's Rotation Theorems\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-217", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Parallel Axis Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nParallel Axis Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-218", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Elastic Collision. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nElastic Collision\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-219", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Boucherot's Theorem (Power Factor Theorem). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBoucherot's Theorem (Power Factor Theorem)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-220", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Tellegen's Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nTellegen's Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-221", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Law of Reflection. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLaw of Reflection\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-222", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Malus's Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMalus's Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-223", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Specific Heat Capacity Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSpecific Heat Capacity Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-224", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Optical Path Length (OPL) Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nOptical Path Length (OPL) Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-225", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Snell's Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSnell's Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-226", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Huygens' Principle. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHuygens' Principle\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-227", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Young's Double-Slit Experiment. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nYoung's Double-Slit Experiment\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-228", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Fraunhofer Diffraction Theory. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFraunhofer Diffraction Theory\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-229", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Fresnel Equations. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFresnel Equations\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-230", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Planck's Law of Blackbody Radiation. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPlanck's Law of Blackbody Radiation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-231", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Stefan-Boltzmann Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nStefan-Boltzmann Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-232", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Wien's Displacement Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nWien's Displacement Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-233", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Rayleigh-Jeans Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nRayleigh-Jeans Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-234", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Compton Scattering Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCompton Scattering Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-235", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Electric Field Formula (from a point charge). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nElectric Field Formula (from a point charge)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-236", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Speed of Sound in air (at temperature T). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSpeed of Sound in air (at temperature T)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-237", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Heat Transfer via Conduction (Fourier's Law). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHeat Transfer via Conduction (Fourier's Law)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-238", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Pauli Exclusion Principle. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPauli Exclusion Principle\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-239", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Energy Stored in a Capacitor Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nEnergy Stored in a Capacitor Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-240", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Einstein's Photoelectric Equation. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nEinstein's Photoelectric Equation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-241", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Bragg's Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBragg's Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-242", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Gauss's Law for Magnetism. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nGauss's Law for Magnetism\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-243", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Faraday's Law of Induction. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFaraday's Law of Induction\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-244", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Lenz's Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLenz's Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-245", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Work Done in an Adiabatic Process (Thermodynamics) Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nWork Done in an Adiabatic Process (Thermodynamics) Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-246", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Amp\u00e8re's Circuital Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nAmp\u00e8re's Circuital Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-247", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Hooke's Law (for Springs). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHooke's Law (for Springs)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-248", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Laplace's Equation. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLaplace's Equation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-249", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Poisson's Equation. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPoisson's Equation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-250", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: D'Alembert's Principle. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nD'Alembert's Principle\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-251", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Lagrange's Equations of Motion. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLagrange's Equations of Motion\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-252", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Hamilton's Principle. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nHamilton's Principle\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-253", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Virial Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nVirial Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-254", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Kepler's Laws of Planetary Motion. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nKepler's Laws of Planetary Motion\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-255", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Newton's Law of Universal Gravitation. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nNewton's Law of Universal Gravitation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-256", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Magnetic Force on a Moving Charge Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMagnetic Force on a Moving Charge Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-257", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Schwarzschild Metric. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSchwarzschild Metric\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-258", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Lorentz Transformation. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLorentz Transformation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-259", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Einstein's Energy-Mass Equivalence. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nEinstein's Energy-Mass Equivalence\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-260", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Shannon Entropy. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nShannon Entropy\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-261", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Dirac Equation. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nDirac Equation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-262", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Feynman Path Integral Formulation. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFeynman Path Integral Formulation\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-263", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Landauer's Principle. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLandauer's Principle\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-264", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Onsager Reciprocity Relations. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nOnsager Reciprocity Relations\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-265", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Bernoulli's Equation (for fluid flow). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBernoulli's Equation (for fluid flow)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-266", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Stokes' Law. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nStokes' Law\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-267", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Reynolds Transport Theorem. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nReynolds Transport Theorem\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-268", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Conservation of Mass. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nConservation of Mass\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-269", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Thermal Conductivity Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nThermal Conductivity Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-270", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the physics theorem: Lens Equation (for a thin lens). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nLens Equation (for a thin lens)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-271", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Binomial Model in finance. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBinomial Model in finance\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-272", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Net Present Value (NPV). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nNet Present Value (NPV)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-273", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Future Value (FV) Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nFuture Value (FV) Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-274", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Present Value (PV) Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nPresent Value (PV) Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-275", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Discounted Cash Flow (DCF) Model. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nDiscounted Cash Flow (DCF) Model\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-276", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Dividend Discount Model. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nDividend Discount Model\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-277", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Capital Asset Pricing Model (CAPM). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCapital Asset Pricing Model (CAPM)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-278", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Gordon Growth Model (GGM). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nGordon Growth Model (GGM)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-279", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Binomial Option Pricing Model. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBinomial Option Pricing Model\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-280", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Bond Pricing Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nBond Pricing Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-281", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Yield to Maturity (YTM). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nYield to Maturity (YTM)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-282", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Sharpe Ratio. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSharpe Ratio\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-283", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Macauley Duration. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nMacauley Duration\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-284", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Modified Duration. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nModified Duration\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-285", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Internal Rate of Return (IRR). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nInternal Rate of Return (IRR)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-286", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Return on Equity (ROE). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nReturn on Equity (ROE)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-287", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Value at Risk (VaR) Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nValue at Risk (VaR) Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-288", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Z-Spread Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nZ-Spread Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-289", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Inventory Turnover Ratio. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nInventory Turnover Ratio\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-290", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: GDP (Expenditure Approach). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nGDP (Expenditure Approach)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-291", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: DuPont Analysis Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nDuPont Analysis Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-292", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Weighted Average Cost of Capital (WACC). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nWeighted Average Cost of Capital (WACC)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-293", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Derivatives Forward Price. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nDerivatives Forward Price\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-294", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Dividend Discount Model (DDM). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nDividend Discount Model (DDM)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-295", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Earnings Yield Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nEarnings Yield Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-296", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Sustainable Growth Rate (SGR). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nSustainable Growth Rate (SGR)\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-297", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Operating Leverage Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nOperating Leverage Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-298", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Covariance Formula. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nCovariance Formula\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-299", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Variance of a Two-Asset Portfolio. Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nVariance of a Two-Asset Portfolio\n**Definition**\n"}], "max_tokens": 1000}}
{"custom_id": "request-300", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Your task is to provide a definition for the finance formula: Profitability Index (PI). Write the equation in LaTex format.\n\nHere are some examples:\n**Concept**\nPigeonhole Principle\n**Definition**\nLet $S$ be a finite set whose cardinality is $n$. Let $S_1, S_2, \\ldots, S_k$ be a partition of $S$ into $k$ subsets. Then: :at least one subset $S_i$ of $S$ contains at least $\\ceiling {\\dfrac n k}$ elements where $\\ceiling {\\, \\cdot \\,}$ denotes the ceiling function.\n\n**Concept**\nNewton's Second Law of Motion\n**Definition**\nNewton's Second Law states that the force acting on an object is equal to the mass of the object multiplied by its acceleration. This law explains how the motion of an object changes when subjected to an external force. F = ma, \\quad \\text{where } F \\text{ is force (N), } m \\text{ is mass (kg), and } a \\text{ is acceleration (m/s}^2\\text{)}.\n\nHere is your task:\n**Concept**\nProfitability Index (PI)\n**Definition**\n"}], "max_tokens": 1000}}
